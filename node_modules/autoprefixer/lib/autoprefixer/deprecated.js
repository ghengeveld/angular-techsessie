(function() {
  var deprecated;

  deprecated = {
    warning: function(method) {
      if ((typeof console !== "undefined" && console !== null ? console.warn : void 0) == null) {
        return;
      }
      return console.warn(("Method autoprefixer." + method + " is deprecated ") + "and will be removed in 0.7 version. " + ("Use autoprefixer(reqs)." + method + " instead."));
    },
    cache: {},
    create: function(autoprefixer, browsers) {
      var key, _base;
      if (browsers == null) {
        browsers = [];
      } else if (!(browsers instanceof Array)) {
        browsers = [browsers];
      }
      key = browsers.toString();
      return (_base = this.cache)[key] || (_base[key] = autoprefixer.apply(autoprefixer, browsers));
    },
    install: function(autoprefixer) {
      var name, _i, _len, _ref, _results;
      _ref = ['compile', 'rework', 'inspect'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        if (name !== 'install' && name !== 'warning') {
          _results.push(autoprefixer[name] = this[name]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    compile: function(str, browsers) {
      if (browsers) {
        deprecated.warning('compile');
      }
      return deprecated.create(this, browsers).compile(str);
    },
    rework: function(browsers) {
      if (browsers) {
        deprecated.warning('rework');
      }
      return deprecated.create(this, browsers).rework;
    },
    inspect: function(browsers) {
      if (browsers) {
        deprecated.warning('inspect');
      }
      return deprecated.create(this, browsers).inspect();
    }
  };

  module.exports = deprecated;

}).call(this);
